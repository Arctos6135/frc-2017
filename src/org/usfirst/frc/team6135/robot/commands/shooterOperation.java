// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc.team6135.robot.commands;
import org.usfirst.frc.team6135.robot.Robot;

import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

/**
 * This command will start the shooter
 * Activated by: Operator Joystick, toggled
 * Creater: Carl Yu
 */
public class shooterOperation extends Command {
	public double targetRPM;
	public double adjustVal;
	public boolean c;
	public Joystick operatorJ;
	public shooterOperation() {
        requires(Robot.shooter);
    }
	public shooterOperation(double v, Joystick j,boolean f)
	{
		requires(Robot.shooter);
		this.targetRPM=v;
		this.operatorJ=j;
		this.c=f;
	}
    // Called just before this Command runs the first time
    protected void initialize() {
    	Robot.shooter.setOn(true);
    	Robot.shooter.set(0);
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	if(c)
    	{
        	autoShoot();
    	}
    	else
    	{
    		Robot.shooter.set(1);
    	}
    	
    	printToSmartDashboard();
    }
    protected void autoShoot()
    {
    	if(Robot.shooter.getVel()>(targetRPM+adjustVal)*1.03)
    	{
    		Robot.shooter.set(0);
    	}
    	else
    	{
    		if(Robot.shooter.getVel()<(targetRPM+adjustVal)*1.03/*Robot.shooter.getVel()>(targetRPM+adjustVal)*0.97*/)
    		{
    			Robot.shooter.set(1);
    		}
    		else
    		{
    			Robot.shooter.set(0);
    		}
    	}
    	if(operatorJ.getRawAxis(3)>0)
    	{
    		incrementAdjVal();
    	}
    	if(operatorJ.getRawAxis(2)>0)
    	{
    		decreaseAdjVal();
    	}
    	if(operatorJ.getRawButton(6))
    	{
    		roughIncrement();
    	}
    	if(operatorJ.getRawButton(5))
    	{
    		roughDecrease();
    	}
    }
    public void incrementAdjVal()
    {
    	this.adjustVal+=20;
    }
    public void roughIncrement()
    {
    	this.adjustVal+=100;
    }
    public void roughDecrease()
    {
    	this.adjustVal-=100;
    }
    public void decreaseAdjVal()
    {
    	this.adjustVal-=20;
    }
    public void setTargetRPM(double v)
    {
    	this.targetRPM=v;
    }
    public void printToSmartDashboard()
    {
    	SmartDashboard.putNumber("TargetRPM: ", targetRPM);
    	SmartDashboard.putNumber("AdjustVal",adjustVal);
    }
    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
    	return false;
    }

    // Called once after isFinished returns true
    protected void end() {
        Robot.shooter.setOn(false);
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    }
}
