package org.usfirst.frc.team6135.robot.subsystems;

import java.util.ArrayList;
import java.util.List;
import org.opencv.core.*;
import org.opencv.imgproc.*;
import org.usfirst.frc.team6135.robot.RobotMap;

import edu.wpi.first.wpilibj.vision.VisionPipeline;
public class Pipeline implements VisionPipeline{

	/**
	* IMAGE class.
	*
	* <p>An OpenCV pipeline generated by GRIP.
	*
	* @author GRIP
	*/

	        //Outputs
        //Outputs
		private double TargetCMX, TargetCMY;
		private int TargetPixelHeight;
        private Mat hsvThresholdOutput = new Mat();
        private Mat maskOutput = new Mat();
        private ArrayList<MatOfPoint> findContoursOutput = new ArrayList<MatOfPoint>();
        private ArrayList<MatOfPoint> filterContoursOutput = new ArrayList<MatOfPoint>();

        static {
                System.loadLibrary(Core.NATIVE_LIBRARY_NAME);
        }

        /**
         * This is the primary method that runs the entire pipeline and updates the outputs.
         */
        @Override       
        public void process(Mat source0) {
                // Step HSV_Threshold0:
                Mat hsvThresholdInput = source0;
                double[] hsvThresholdHue = {67.98561151079136, 91.64725457570715};
                double[] hsvThresholdSaturation = {61.915467625899275, 255.0};
                double[] hsvThresholdValue = {63.57014388489208, 255.0};
                hsvThreshold(hsvThresholdInput, hsvThresholdHue, hsvThresholdSaturation, hsvThresholdValue, hsvThresholdOutput);

                // Step Mask0:
                Mat maskInput = source0;
                Mat maskMask = hsvThresholdOutput;
                mask(maskInput, maskMask, maskOutput);

                // Step Find_Contours0:
                Mat findContoursInput = hsvThresholdOutput;
                boolean findContoursExternalOnly = false;
                findContours(findContoursInput, findContoursExternalOnly, findContoursOutput);

                // Step Filter_Contours0:
                ArrayList<MatOfPoint> filterContoursContours = findContoursOutput;
                double filterContoursMinArea = 200.0;
                double filterContoursMinPerimeter = 0.0;
                double filterContoursMinWidth = 0.0;
                double filterContoursMaxWidth = 1000.0;
                double filterContoursMinHeight = 0.0;
                double filterContoursMaxHeight = 1000.0;
                double[] filterContoursSolidity = {0, 100};
                double filterContoursMaxVertices = 1000000.0;
                double filterContoursMinVertices = 0.0;
                double filterContoursMinRatio = 0.0;
                double filterContoursMaxRatio = 1000.0;
                filterContours(filterContoursContours, filterContoursMinArea, filterContoursMinPerimeter, filterContoursMinWidth, filterContoursMaxWidth, filterContoursMinHeight, filterContoursMaxHeight, filterContoursSolidity, filterContoursMaxVertices, filterContoursMinVertices, filterContoursMinRatio, filterContoursMaxRatio, filterContoursOutput);
                
                if(filterContoursOutput.size() > 0){
        			ArrayList<Integer> cmx = new ArrayList<Integer>();
        			ArrayList<Integer> cmy = new ArrayList<Integer>();
        			int x, y;
        			x= y = 0;
        			//There should be two images in the field of view of the camera.  
        			//We will average the centers of each to determine Gear Peg location.
        			for (int i = 0; i < filterContoursOutput.size(); i++) {
        				final MatOfPoint target = filterContoursOutput.get(i);
        				this.TargetPixelHeight = target.height();
        				final Rect r = Imgproc.boundingRect(target);
        				cmx.add((r.x + (r.width / 2)));
        				cmy.add((r.y + (r.height / 2)));
        			}
        			//Calculate the average of the centers of the two images in view.
        			for (int i = 0; i < cmx.size(); i++) {
        				x = x + cmx.get(i);
        				this.TargetCMX = x/2;
        			}
        			for (int i = 0; i < cmy.size(); i++) {
        				y = y + cmy.get(i);
        				this.TargetCMY = y/2;
        			}
        		}
        }

        /**
         * This method is a generated getter for the output of a HSV_Threshold.
         * @return Mat output from HSV_Threshold.
         */
        public Mat hsvThresholdOutput() {
                return hsvThresholdOutput;
        }

        /**
         * This method is a generated getter for the output of a Mask.
         * @return Mat output from Mask.
         */
        public Mat maskOutput() {
                return maskOutput;
        }

        /**
         * This method is a generated getter for the output of a Find_Contours.
         * @return ArrayList<MatOfPoint> output from Find_Contours.
         */
        public ArrayList<MatOfPoint> findContoursOutput() {
                return findContoursOutput;
        }

        /**
         * This method is a generated getter for the output of a Filter_Contours.
         * @return ArrayList<MatOfPoint> output from Filter_Contours.
         */
        public ArrayList<MatOfPoint> filterContoursOutput() {
                return filterContoursOutput;
        }


        /**
         * Segment an image based on hue, saturation, and value ranges.
         *
         * @param input The image on which to perform the HSL threshold.
         * @param hue The min and max hue
         * @param sat The min and max saturation
         * @param val The min and max value
         * @param output The image in which to store the output.
         */
        private void hsvThreshold(Mat input, double[] hue, double[] sat, double[] val,
            Mat out) {
                Imgproc.cvtColor(input, out, Imgproc.COLOR_BGR2HSV);
                Core.inRange(out, new Scalar(hue[0], sat[0], val[0]),
                        new Scalar(hue[1], sat[1], val[1]), out);
        }

        /**
         * Filter out an area of an image using a binary mask.
         * @param input The image on which the mask filters.
         * @param mask The binary image that is used to filter.
         * @param output The image in which to store the output.
         */
        private void mask(Mat input, Mat mask, Mat output) {
                mask.convertTo(mask, CvType.CV_8UC1);
                Core.bitwise_xor(output, output, output);
                input.copyTo(output, mask);
        }

        /**
         * Sets the values of pixels in a binary image to their distance to the nearest black pixel.
         * @param input The image on which to perform the Distance Transform.
         * @param type The Transform.
         * @param maskSize the size of the mask.
         * @param output The image in which to store the output.
         */
        private void findContours(Mat input, boolean externalOnly,
                List<MatOfPoint> contours) {
                Mat hierarchy = new Mat();
                contours.clear();
                int mode;
                if (externalOnly) {
                        mode = Imgproc.RETR_EXTERNAL;
                }
                else {
                        mode = Imgproc.RETR_LIST;
                }
                int method = Imgproc.CHAIN_APPROX_SIMPLE;
                Imgproc.findContours(input, contours, hierarchy, mode, method);
        }


        /**
         * Filters out contours that do not meet certain criteria.
         * @param inputContours is the input list of contours
         * @param output is the the output list of contours
         * @param minArea is the minimum area of a contour that will be kept
         * @param minPerimeter is the minimum perimeter of a contour that will be kept
         * @param minWidth minimum width of a contour
         * @param maxWidth maximum width
         * @param minHeight minimum height
         * @param maxHeight maximimum height
         * @param Solidity the minimum and maximum solidity of a contour
         * @param minVertexCount minimum vertex Count of the contours
         * @param maxVertexCount maximum vertex Count
         * @param minRatio minimum ratio of width to height
         * @param maxRatio maximum ratio of width to height
         */
        private void filterContours(List<MatOfPoint> inputContours, double minArea,
                double minPerimeter, double minWidth, double maxWidth, double minHeight, double
                maxHeight, double[] solidity, double maxVertexCount, double minVertexCount, double
                minRatio, double maxRatio, List<MatOfPoint> output) {
                final MatOfInt hull = new MatOfInt();
                output.clear();
                //operation
                for (int i = 0; i < inputContours.size(); i++) {
                        final MatOfPoint contour = inputContours.get(i);
                        final Rect bb = Imgproc.boundingRect(contour);
                        if (bb.width < minWidth || bb.width > maxWidth) continue;
                        if (bb.height < minHeight || bb.height > maxHeight) continue;
                        final double area = Imgproc.contourArea(contour);
                        if (area < minArea) continue;
                        if (Imgproc.arcLength(new MatOfPoint2f(contour.toArray()), true) < minPerimeter) continue;
                        Imgproc.convexHull(contour, hull);
                        MatOfPoint mopHull = new MatOfPoint();
                        mopHull.create((int) hull.size().height, 1, CvType.CV_32SC2);
                        for (int j = 0; j < hull.size().height; j++) {
                                int index = (int)hull.get(j, 0)[0];
                                double[] point = new double[] { contour.get(index, 0)[0], contour.get(index, 0)[1]};
                                mopHull.put(j, 0, point);
                        }
                        final double solid = 100 * area / Imgproc.contourArea(mopHull);
                        if (solid < solidity[0] || solid > solidity[1]) continue;
                        if (contour.rows() < minVertexCount || contour.rows() > maxVertexCount) continue;
                        final double ratio = bb.width / (double)bb.height;
                        if (ratio < minRatio || ratio > maxRatio) continue;
                        output.add(contour);
                }
        }
        public double getTargetPixelHeight(){
    		return this.TargetPixelHeight;
    	}
    	
    	public double getTargetCMX(){
    		return this.TargetCMX;
    	}
    	
    	public double getTargetCMY(){
    		return this.TargetCMY;
    	}
    	
    	public boolean onTarget(){
            boolean status = true;
            double x, y;
            x = Math.abs(this.TargetCMX);
            y = Math.abs(this.TargetCMY);
            status &= (x < (.05));
            status &= (y < (.05));
            //status &= (this.targetCMY > (this.targetCMY - .001));
            //status &= (this.targetCMY < (this.targetCMY + .001));
            return status;
        }
        

       public boolean getXDirection(){
            if(this.TargetCMX >= 0.0){
                return true;
            }else{
                return false;
            }
        }

        public boolean getYDirection(){
            if(this.TargetCMY >= 0.0){
                return true;
            }else{
                return false;
            }
        }

    	public double calcAngleToGearPeg(){
    		double angle = 0.0;
    		//TODO:  Put the logic to calculate angle to Gear Peg here...
    		return angle;
    	}
    	
    	public double calcDistanceToGearPeg(double tph){
    		double distance = 0.0;
    		distance = ((RobotMap.targetHeight*RobotMap.yResolution)/(2*(tph*Math.tan(Math.toRadians(RobotMap.cameraLensAngle)))));
    		return distance;
    	}
}





