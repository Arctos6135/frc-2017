// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc.team6135.robot.subsystems;

import org.usfirst.frc.team6135.robot.Robot;
import org.usfirst.frc.team6135.robot.RobotMap;
import org.usfirst.frc.team6135.robot.commands.shooterOff;

import com.ctre.CANTalon;
import com.ctre.CANTalon.FeedbackDevice;

import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


/**
 * This command will start the shooter
 * Activated by: SIOperation
 * Creater: Carl Yu
 */
public class Shooter extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    private final CANTalon talon;
    private boolean ifOn=false;
    private boolean ifWarning;
    public Shooter()
    {
    	talon= RobotMap.shooterTalon;
    	talon.setFeedbackDevice(FeedbackDevice.QuadEncoder);
    }

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS


    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new shooterOff());

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }
    public void set(double speed)
    {
    	talon.set(-speed);
    }
    public double getVel()
    {
    	return talon.getEncVelocity()*24/15;
    }
    public void setOn(boolean val)
    {
    	ifOn=val;
    }
    public void printToSmartDashboard()
    {
    	SmartDashboard.putNumber("Shooter Current reading", Robot.pdp.getCurrent(12));
    	ifWarning=Robot.pdp.getCurrent(12) > 25 && getVel()==0;
    	SmartDashboard.putBoolean("Shooter Warning", ifWarning);
    	SmartDashboard.putBoolean("ShooterOn", ifOn);
    	SmartDashboard.putNumber("Shooter RPM", getVel());
    }
}

