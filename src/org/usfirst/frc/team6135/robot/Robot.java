// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc.team6135.robot;

import edu.wpi.cscore.UsbCamera;
import edu.wpi.first.wpilibj.ADXRS450_Gyro;
import edu.wpi.first.wpilibj.CameraServer;
import edu.wpi.first.wpilibj.DriverStation;
import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.CommandGroup;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc.team6135.robot.commands.*;
import org.usfirst.frc.team6135.robot.subsystems.*;
import org.usfirst.frc.team6135.robot.subsystems.reserved.FuelIndexer;
import org.usfirst.frc.team6135.robot.subsystems.reserved.FuelIntake;
import org.usfirst.frc.team6135.robot.subsystems.reserved.Shooter;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class Robot extends IterativeRobot {

    Command autonomousCommand;
    //Command AUTOSecondGear;
    
    
    public static final boolean useNavx=false;
    public static final boolean useGyro=false;
    public static final boolean useEncoder=false;
    
    public static OI oi;
    public static Gear gear;
    public static FuelIntake fuelIntake;
    public static FuelIndexer fuelIndexer;
    public static Climber climber;
    public static Miscallaneous miscallaneous;
    public static Shooter shooter;
    public static EncSensor lEncSubsystem;
    public static EncSensor rEncSubsystem;
    
    public static UsbCamera camera;
    public static SendableChooser<CommandGroup> autoChooser;
    
    public static Drive drive;

    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    public void robotInit() {
    	RobotMap.init();
        //fuelIntake = new FuelIntake();
        //fuelIndexer = new FuelIndexer();
        //shooter = new Shooter();
    	
        gear = new Gear();
        climber = new Climber();
        
        drive=new Drive();
        lEncSubsystem=new EncSensor(RobotMap.leftEncoder, false);
        rEncSubsystem=new EncSensor(RobotMap.rightEncoder,true);
        
        miscallaneous = new Miscallaneous();
        camera = CameraServer.getInstance().startAutomaticCapture(0);
        autoChooser = new SendableChooser<CommandGroup>();
        autoChooser.addDefault("DrivePastBaseLine", new DrivePastBaseLine(useNavx,useGyro, useEncoder));
        autoChooser.addObject("CenterGearDeposit", new CenterGearDeposit(useNavx,useGyro, useEncoder));
        autoChooser.addObject("FarPositionDepositGear", new FarPositionDepositGear(useNavx,useGyro, useEncoder));
        autoChooser.addObject("NearPositionDepositGear", new NearPositionDepositGear(useNavx,useGyro, useEncoder));
    	SmartDashboard.putData("Auto Chooser", autoChooser);
        // OI must be constructed after subsystems. If the OI creates Commands
        //(which it very likely will), subsystems are not guaranteed to be
        // constructed yet. Thus, their requires() statements may grab null
        // pointers. Bad news. Don't move it.
        oi = new OI();
        Robot.lEncSubsystem.reverse();
		Robot.rEncSubsystem.reverse();
		Robot.drive.reverse();
    }

    /**
     * This function is called when the disabled button is hit.
     * You can use it to reset subsystems before shutting down.
     */
    public void disabledInit(){

    }

    public void disabledPeriodic() {
        Scheduler.getInstance().run();
    }

    public void autonomousInit() {
    	autonomousCommand=new driveDistance(35,0.6,useNavx,useGyro,useEncoder);
    	if(autonomousCommand!=null) autonomousCommand.start();
    }

    /**
     * This function is called periodically during autonomous
     */
    public void autonomousPeriodic() {
        Scheduler.getInstance().run();
        printToSmartDashboard();
    }

    public void teleopInit() {
        // This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to
        // continue until interrupted by another command, remove
        // this line or comment it out.
        if (autonomousCommand != null) autonomousCommand.cancel();
    }

    /**
     * This function is called periodically during operator control
     */
    public void teleopPeriodic() {
        Scheduler.getInstance().run();
        printToSmartDashboard();
    }

    /**
     * This function is called periodically during test mode
     */
    public void testPeriodic() {
    	drive.setMotors(1.0, 1.0);
		lEncSubsystem.outPutVel("Left:");
		rEncSubsystem.outPutVel("Right:");
        LiveWindow.run();
    }
    public void printToSmartDashboard()
    {
    	Robot.climber.printToSmartDashboard();
    	Robot.fuelIndexer.printToSmartDashboard();
    	Robot.fuelIntake.printToSmartDashboard();
    	Robot.shooter.printToSmartDashboard();
    	//Robot.drivetrain.printToSmartDashboard();
    	Robot.gear.printToSmartDashboard();
    	SmartDashboard.putNumber("Match Time", DriverStation.getInstance().getMatchTime());
    	SmartDashboard.putString("Alliance Color", AllianceColor());
    	Robot.miscallaneous.printToSmartDashboard();
    }
    public String AllianceColor()
    {
    	return DriverStation.getInstance().getAlliance()==DriverStation.Alliance.Blue ? "Blue":"Red";
    }
}
