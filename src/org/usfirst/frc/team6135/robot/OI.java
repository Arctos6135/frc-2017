// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc.team6135.robot;

import org.usfirst.frc.team6135.robot.commands.*;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.JoystickButton;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);
    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public Joystick logitechJoystick;
    public Joystick xboxController;
    
    //Driver Button
    public JoystickButton cancelAllSubsystem;
    public JoystickButton reverse;
    
    //Operator Button
    public JoystickButton operateClimber;
    public JoystickButton operateClimberDriver;
    public JoystickButton operateSI;
    public JoystickButton operateIntake;
    public JoystickButton operateShooter;
	public JoystickButton ClimberBackward;
    
    public OI() {
        xboxController = new Joystick(1);
        logitechJoystick = new Joystick(0);   
        initOperator();
        initDriver();
        SmartDashboard.putData("Climber Backward", new ClimberBackward());
    }

    public Joystick getLogitechJoystick() {
        return logitechJoystick;
    }

    public Joystick getXboxController() {
        return xboxController;
    }
    public void initDriver()
    {
    	cancelAllSubsystem=new JoystickButton(logitechJoystick,8);
    	cancelAllSubsystem.whenPressed(new stopAllSubsystem());
    	reverse=new JoystickButton(logitechJoystick,2);
    	reverse.whenPressed(new reverse());
    	operateClimberDriver=new JoystickButton(logitechJoystick,11);
    	operateClimberDriver.toggleWhenPressed(new operateClimber());
    	ClimberBackward=new JoystickButton(logitechJoystick,12);
    	ClimberBackward.toggleWhenPressed(new ClimberBackward());
    }
    public void initOperator()
    {
    	operateClimber=new JoystickButton(xboxController,3);
    	operateClimber.toggleWhenPressed(new operateClimber());
    	operateSI=new JoystickButton(xboxController,1);
    	operateSI.toggleWhenPressed(new operateSI());
    	operateIntake=new JoystickButton(xboxController,2);
    	operateIntake.toggleWhenPressed(new operateIntake());

    }
}

