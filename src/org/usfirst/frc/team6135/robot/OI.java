// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc.team6135.robot;

import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc.team6135.robot.commands.*;
<<<<<<< HEAD
import org.usfirst.frc.team6135.robot.commands.debug.DriveDistance;
import org.usfirst.frc.team6135.robot.commands.debug.Flip;
import org.usfirst.frc.team6135.robot.commands.debug.Flip_tmp;
import org.usfirst.frc.team6135.robot.commands.debug.RotateAngle;
import org.usfirst.frc.team6135.robot.commands.debug.shooterDEBUG;
=======
>>>>>>> parent of c6097e1... Added Comments Debug

import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.*;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    public JoystickButton shooterOff;
    public JoystickButton climberOff;
    public JoystickButton indexOff;
    public JoystickButton intakeOff;
    
    public JoystickButton indexOperation;
    public JoystickButton climberOperation;
    public JoystickButton intakeOperation;
    public JoystickButton SI;
    
    
    public JoystickButton switchDir;
    public JoystickButton switchDir_tmp;
    public static Joystick j = new Joystick(0);
    public static Joystick operatorJ=new Joystick(1);

    public JetsonComm jetson;

    public OI() {
    	initDriver();
    	initOperator();
        // SmartDashboard Buttons
        SmartDashboard.putData("Drive Distance", new DriveDistance(Robot.auto, 5));
        SmartDashboard.putData("Rotate", new RotateAngle(Robot.auto, -179.9));
<<<<<<< HEAD
        SmartDashboard.putData("ShooterDebug", new shooterDEBUG(20000,operatorJ));
        SmartDashboard.putData("Flip",new Flip());
        SmartDashboard.putData("Flip using Encoders", new Flip_tmp());
=======
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
>>>>>>> parent of c6097e1... Added Comments Debug
    }
    public void initDriver()
    {
    	shooterOff=new JoystickButton(j,8);
    	shooterOff.whenPressed(new shooterOff());
    	climberOff=new JoystickButton(j,7);
    	climberOff.whenPressed(new climberOff());
    	indexOff=new JoystickButton(j,10);
    	indexOff.whenPressed(new indexOff());
    	intakeOff=new JoystickButton(j,9);
    	intakeOff.whenPressed(new intakeOff());
        switchDir = new JoystickButton(j, 2);
        switchDir.whenPressed(new Flip());
    }
    public void initOperator()
    {
    	SI=new JoystickButton(operatorJ,1);
    	SI.toggleWhenPressed(new SIOperation(jetson.gettargetRPM()));
    	climberOperation=new JoystickButton(operatorJ,2);
    	intakeOperation=new JoystickButton(operatorJ,3);
    }
<<<<<<< HEAD
    public Joystick getj() {
        return j;
    }
=======
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getj() {
        return j;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
>>>>>>> parent of c6097e1... Added Comments Debug
}

