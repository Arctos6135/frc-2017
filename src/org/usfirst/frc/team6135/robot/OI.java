// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc.team6135.robot;

import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc.team6135.robot.commands.*;

import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.*;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public JoystickButton shootWithSpeed;
    public JoystickButton shootWithIndex;
    public JoystickButton intakeOn;
    public JoystickButton climberOn;
    public static Joystick j;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        j = new Joystick(0);
        
        shootWithIndex = new JoystickButton(j, 2);
        shootWithIndex.whileHeld(new shootWithIndex());
        shootWithSpeed = new JoystickButton(j, 1);
        shootWithSpeed.whileHeld(new shootWithSpeed());
        intakeOn= new JoystickButton(j,3);
        intakeOn.whileActive(new intakeOn());
        climberOn=new JoystickButton(j,4);
        climberOn.whenPressed(new climberOn());
        


        // SmartDashboard Buttons
        SmartDashboard.putData("Autonomous Command", new AutonomousCommand());
        SmartDashboard.putData("shootWithSpeed", new shootWithSpeed());
        SmartDashboard.putData("intakeOn", new intakeOn());
        SmartDashboard.putData("indexWithSpeed", new indexWithSpeed());
        SmartDashboard.putData("shootWithIndex", new shootWithIndex());
        SmartDashboard.putData("intakeOff", new intakeOff());
        SmartDashboard.putData("indexOff", new indexOff());
        SmartDashboard.putData("shooterOff", new shooterOff());
        SmartDashboard.putData("intakeOn", new intakeOn());
        SmartDashboard.putData("intakeOff", new intakeOff());
        SmartDashboard.putData("climberOn", new climberOn());
        SmartDashboard.putData("climberOff", new climberOff());

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getj() {
        return j;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}

